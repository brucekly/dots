#+TITLE: Emacs configuration
#+STARTUP: content

* Starting up

#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000
	read-process-output-max (* 1024 1024))

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (with-temp-buffer (write-file custom-file)))
  (load custom-file)

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Set personal information.

#+begin_src emacs-lisp
  (setq user-mail-address "lucy.mcphail.p@gmail.com"
	user-full-name "Lucy McPhail")
#+end_src

* Appearance
** Built in tweaks

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (setq inhibit-splash-screen t)

  (when window-system
    (setq frame-title-format "%b"
	  use-dialog-box nil)
    (tooltip-mode -1)
    (blink-cursor-mode -1))

  (setq show-paren-delay 0)
  (show-paren-mode t)

  (setq visual-line-fringe-indicators '(left-curly-arrow nil))
  (global-visual-line-mode t)

  (setq-default indicate-empty-lines t)

  (line-number-mode t)
  (column-number-mode t)

  (setq frame-resize-pixelwise t)
#+end_src

** Theme

Set a nice font and theme.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :family "Iosevka Fixed"
		      :height 120)

  (set-face-attribute 'fixed-pitch nil
		      :family "Iosevka Fixed"
		      :height 120)

  (set-face-attribute 'variable-pitch nil
		      :family "Overpass"
		      :height 130)

  (use-package color-theme-sanityinc-tomorrow
    :config
    (load-theme 'sanityinc-tomorrow-night t))
#+end_src

* Defuns
** Line numbers in =goto-line=

http://whattheemacsd.com/key-bindings.el-01.html

#+begin_src emacs-lisp
  (global-set-key [remap goto-line] 'goto-line-with-feedback)

  (defun goto-line-with-feedback ()
    "Show line numbers temporarily, while prompting for the line number input"
    (interactive)
    (unwind-protect
	(progn
	  (display-line-numbers-mode 1)
	  (goto-line (read-number "Goto line: ")))
      (display-line-numbers-mode -1)))
#+end_src

** Jump to config

#+begin_src emacs-lisp
  (defun open-config ()
    (interactive)
    (find-file
     (expand-file-name "README.org" user-emacs-directory)))

  (global-set-key (kbd "C-c i") #'open-config)
#+end_src

** Eval and replace sexp

https://emacsredux.com/blog/2013/06/21/eval-and-replace/

#+begin_src emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value"
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
	       (current-buffer))
      (error (message "Invalid expression")
	     (insert (current-kill 0)))))

  (global-set-key (kbd "C-c e") #'eval-and-replace)
#+end_src

* General configuration
** Misc

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (defalias 'list-buffers 'ibuffer)

  (setq ring-bell-function (lambda () nil)
        delete-by-moving-to-trash t
        disabled-command-function nil
        compilation-ask-about-save nil
        message-kill-buffer-on-exit t
        sentence-end-double-space nil
        confirm-kill-emacs #'y-or-n-p)
#+end_src

** Auto revert

Automatically detect and load changes to files and dired buffers.

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t
	auto-revert-verbose nil)
#+end_src

** Backups and saves

Keep backups inside =~/.emacs.d/= instead of the working directory, and keep auto saves in a temporary directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist
	`(("." . ,(expand-file-name "backups" user-emacs-directory))))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+end_src

** Keybinds

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") #'hippie-expand)
  (global-set-key (kbd "M-o") #'other-window)
  (global-set-key (kbd "C-M-r") #'raise-sexp)
  (global-set-key (kbd "C-c s") #'shell)
#+end_src

** =exec-path-from-shell=

Ensure environment variables in emacs match the user shell.

#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize)))
#+end_src

** Mac changes

Use command as the meta key on macOS, and unbind option to make inserting special characters easier.
Also enable the menu bar, since it doesn't take up extra room on macOS.

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta
	  mac-option-modifier 'none
	  ns-function-modifier 'hyper
	  mac-pass-command-to-system nil)
    (menu-bar-mode t))
#+end_src

** Whitespace cleanup

Clean whitespace on save, but only if it was already clean to avoid messy diffs.

#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :config
    (global-whitespace-cleanup-mode t))
#+end_src

** Completion

Vertico is a lightweight completion UI.

#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode t))

  (use-package orderless
    :custom (completion-styles '(orderless)))

  (use-package marginalia
    :config
    (marginalia-mode t))
#+end_src

Consult provides a lot of useful commands based on =completing-read=.

#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-x b" . consult-buffer)
           ("M-y" . consult-yank-pop)
           ("<help> a" . consult-apropos)
           ("M-g e" . consult-compile-error)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-g f" . consult-flymake)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi))
    :init
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    (setq consult-project-function (lambda (_) (projectile-project-root))))
#+end_src

Load some consult extensions.
The package =consult-dir= provides a directory jumper, like =z= in the shell, but for emacs.
Consult comes with a binding to search =flymake= errors, but I use =flycheck= instead.

#+begin_src elisp
  (use-package consult-dir
    :after consult
    :bind (("C-x C-d" . consult-dir)
	   :map minibuffer-local-completion-map
	   ("C-x C-d" . consult-dir)
	   ("C-x C-j" . consult-dir-jump-file))
    :config
    (setq consult-dir-project-list-function nil
	  consult-dir-project-list-function #'consult-dir-projectile-dirs))
#+end_src

Embark provides a contextual menu for emacs which integrates with consult.

#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command))

  (use-package embark-consult
    :after (embark consult)
    :demand t
    :hook (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

Corfu displays completion-at-point results in a child frame.

#+begin_src emacs-lisp
  (use-package corfu
    :init
    (corfu-global-mode))

  (setq tab-always-indent 'complete)
#+end_src

** Recent files

#+begin_src emacs-lisp
  (use-package recentf
    :config
    (setq recentf-max-saved-items 50)
    (recentf-mode t))
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit)
	   ("C-x M-g" . magit-dispatch)))
#+end_src

** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :bind ("C-c p" . projectile-command-map)
    :init
    (projectile-mode t))
#+end_src

** Restclient

#+begin_src emacs-lisp
  (use-package restclient)
#+end_src

* Org

#+begin_src emacs-lisp
  (use-package org
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :config
    (require 'org-tempo)
    (setq org-hide-leading-stars t
          org-startup-indented t
          calendar-week-start-day 1
          org-agenda-start-on-weekday 1
          org-adapt-indentation nil
          org-agenda-files '("~/Dropbox/org/"))
    (add-to-list 'org-structure-template-alist
                 '("el" . "src emacs-lisp")))
#+end_src

* Mail

I'm using =mu= and =mu4e= to read mail, =mbsync= for IMAP, and =msmtp= for SMTP.

#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :demand t
    :bind ("C-c m" . mu4e)
    :config
    (setq mail-user-agent 'mu4e-user-agent)

    (setq mu4e-completing-read-function #'completing-read)

    (setq mu4e-sent-folder "/gmail/[Gmail]/Sent Mail"
	  mu4e-trash-folder "/gmail/[Gmail]/Trash"
	  mu4e-drafts-folder "/gmail/[Gmail]/Drafts")

    (setq mu4e-maildir-shortcuts
	  '((:maildir "/gmail/INBOX" :key ?i)
	    (:maildir "/gmail/[Gmail]/Sent Mail" :key ?s)
	    (:maildir "/gmail/[Gmail]/Trash" :key ?t)
	    (:maildir "/gmail/[Gmail]/All Mail" :key ?a)
	    (:maildir "/university/Inbox" :key ?I)
	    (:maildir "/university/Sent Items" :key ?S)
	    (:maildir "/university/Deleted Items" :key ?T)
	    (:maildir "/university/Archive" :key ?A)))

    (setq mu4e-contexts
	  (list (make-mu4e-context
		 :name "personal"
		 :match-func
		 (lambda (msg)
		   (when msg
		     (string-prefix-p "/gmail/[Gmail]"
				      (mu4e-message-field msg :maildir))))
		 :vars '((user-mail-address . "lucy.mcphail.p@gmail.com")
			 (mu4e-sent-folder . "/gmail/[Gmail]/Sent Mail")
			 (mu4e-trash-folder . "/gmail/[Gmail]/Trash")
			 (mu4e-drafts-folder . "/gmail/[Gmail]/Drafts")
			 (mu4e-refile-folder . "/gmail/[Gmail]/All Mail")
			 (mu4e-sent-messages-behavior . delete)))
		(make-mu4e-context
		 :name "university"
		 :match-func
		 (lambda (msg)
		   (when msg
		     (string-prefix-p "/university"
				      (mu4e-message-field msg :maildir))))
		 :vars '((user-mail-address . "s2079454@ed.ac.uk")
			 (mu4e-sent-folder . "/university/Sent Items")
			 (mu4e-trash-folder . "/university/Deleted Items")
			 (mu4e-drafts-folder . "/university/Drafts")
			 (mu4e-refile-folder . "/university/Archive")
			 (mu4e-sent-messages-behavior . delete)))))

    (setq mu4e-bookmarks
	  '((:name "Unified inbox"
		   :query "maildir:/gmail/INBOX OR maildir:/university/Inbox"
		   :key ?i)
	    (:name "Today's messages" :query "date:today..now" :key ?t)
	    (:name "Last 7 days" :query "date:7d..now" :hide-unread t :key ?w)))

    (setq mu4e-context-policy 'pick-first
	  mu4e-compose-context-policy 'always-ask)

    (setq mu4e-get-mail-command "mbsync -a")

    (require 'smtpmail)
    (setq sendmail-program "msmtp"
	  message-sendmail-f-is-evil t
	  message-sendmail-extra-arguments '("--read-envelope-from")
	  send-mail-function 'smtpmail-send-it
	  message-send-mail-function 'message-send-mail-with-sendmail)

    (setq mu4e-update-interval (* 60 15))

    (setq mu4e-change-filenames-when-moving t)

    (setq mu4e-headers-include-related nil
	  mu4e-hide-index-messages t
	  mu4e-compose-dont-reply-to-self t
	  mu4e-attachment-dir  "~/Downloads")

    (setq mu4e-confirm-quit nil)

    ;; prefer plain text
    (with-eval-after-load "mm-decode"
      (add-to-list 'mm-discouraged-alternatives "text/html")
      (add-to-list 'mm-discouraged-alternatives "text/richtext"))

    (mu4e t))
#+end_src

Also add an indicator to the modeline when I have new mail.

#+begin_src emacs-lisp
  (use-package mu4e-alert
    :after mu4e
    :init
    (setq mu4e-alert-interesting-mail-query
      (concat
       "flag:unread maildir:/university/Inbox "
       "OR "
       "flag:unread maildir:/gmail/[Gmail]/INBOX"))
    (setq mu4e-alert-modeline-formatter
	  (lambda (mail-count)
	    (if (not (zerop mail-count))
		(format "[Mail %d] " mail-count)
	      " ")))
    (mu4e-alert-enable-mode-line-display))
#+end_src

Check that I've attached something before sending a message if I've said I will.

#+begin_src emacs-lisp
  (defun message-attachment-present-p ()
    (save-excursion
      (save-restriction
	(widen)
	(goto-char (point-min))
	(when (search-forward "<#part type" nil t) t))))

  (defun message-warn-if-no-attachments ()
    (when (and
	   (save-excursion
	     (save-restriction
	       (widen)
	       (goto-char (point-min))
	       (re-search-forward "attach" nil t)))
	   (not (message-attachment-present-p)))
      (unless (y-or-n-p "No attachment. Send the message?")
	(keyboard-quit))))

  (add-hook 'message-send-hook #'message-warn-if-no-attachments)
#+end_src

* Coding
** LSP

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode t))

  (use-package eglot
    :bind (:map eglot-mode-map
                ("C-c r" . eglot-rename)
                ("C-c o" . eglot-code-action-organize-imports)
                ("C-c h" . eldoc))
    :config
    (setq eldoc-echo-area-use-multiline-p nil)
    (define-key eglot-mode-map [remap display-local-help] nil))
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package python
    :hook (python-mode . eglot-ensure)
    :config
    (when (executable-find "ipython")
      (setq python-shell-interpreter "ipython"
            python-shell-interpreter-args "-i --simple-prompt")))
#+end_src

** LaTeX

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :hook ((TeX-mode . LaTeX-math-mode)
           (TeX-mode . reftex-mode)
           (TeX-mode . eglot-ensure))
    :init
    (setq font-latex-fontify-script nil
          font-latex-fontify-sectioning 'color
          TeX-parse-self t
          TeX-save-query nil
          TeX-view-program-selection '((output-pdf "PDF Viewer"))
          TeX-view-program-list
          '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b"))
          TeX-master nil
          TeX-source-correlate-mode t
          TeX-source-correlate-start-server t))
#+end_src

** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode
    :hook (haskell-mode . interactive-haskell-mode)
    :bind (:map haskell-mode-map
		("C-c h" . haskell-hoogle))
    :init
    (setq haskell-hoogle-command "hoogle")
    (require 'haskell-interactive-mode)
    (require 'haskell-process))

  (use-package hindent
    :hook (haskell-mode . hindent-mode))

  (use-package elisp-slime-nav
    :hook ((emacs-lisp-mode ielm-mode) . elisp-slime-nav-mode))
#+end_src

** Lisp

#+begin_src emacs-lisp
  (use-package slime
    :config
    (require 'slime-autoloads)
    (slime-setup '(slime-fancy slime-company))
    (setq slime-net-coding-system 'utf-8-unix)
    (setq inferior-lisp-program "sbcl"))
#+end_src
